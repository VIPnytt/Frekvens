#pragma once

#include "modules/ModeModule.h"

class SmoothWaveformMode : public ModeModule
{
private:
    unsigned long lastMillis = 0;

    const std::vector<std::vector<uint16_t>> smooth = {
        {
            0b0100000000000000,
            0b1010000000000000,
            0b1001111111111111,
        },
        {
            0b1000000000000000,
            0b0100000000000000,
            0b0010110000000000,
            0b0001011111111111,
        },
        {
            0b0000000000000110,
            0b0001100000001001,
            0b0010010000010000,
            0b0100001000100000,
            0b1000000100100000,
            0b0000000011000000,
        },
        {
            0b0000000000011000,
            0b0100000000100100,
            0b1010000001000010,
            0b0001000010000010,
            0b0000100100000010,
            0b0000011000000001,
        },
        {
            0b0000001100000000,
            0b0000010010000000,
            0b1000100010000000,
            0b0101000001000100,
            0b0010000000101011,
            0b0000000000101000,
            0b0000000000010000,
        },
        {
            0b0001100000000000,
            0b0010100000000000,
            0b0100100001000000,
            0b1000100010111111,
            0b0000100010000000,
            0b0000010100000000,
            0b0000001000000000,
        },
    };

public:
    SmoothWaveformMode() : ModeModule("Smooth waveform") {};

    void handle() override;
};
